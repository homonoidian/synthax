{"repository_name":"synthax","body":"# synthax\n\nSynthax is a simple parser synthesizer for Crystal.\n\n```crystal\n# JSON grammar\n\nws = some(' ' | '\\r' | '\\n' | '\\t')\ndigit = '0'..'9'\ndigits = many(digit)\ninteger = maybe('-') & ('0' | ('1'..'9') & some(digit))\nfraction = '.' & digits\nexponent = ('E' | 'e') & ('+' | '-') & digits\nnumber = keep(integer & maybe(fraction) & maybe(exponent), \"number:value\")\nhex = digit | ('A'..'F') | ('a'..'f')\nescape = '\"' | '\\\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't' | ('u' & hex & hex & hex & hex)\ncharacter = ((0x0020..0x10FFFF) - '\"' - '\\\\') | ('\\\\' & escape)\nstring = '\"' & keep(some(character), \"string:value\") & '\"'\nvalue = ahead\nelement = ws & value & ws\nelements = sep(element, by: ',')\narray = '[' & (elements | ws) & ']'\nmember = capture(ws & string & ':' & element, \"pair\")\nmembers = sep(member, by: ',')\nobject = '{' & (members | ws) & '}'\nvalue.put \\\n  capture(object) |\n  capture(array) |\n  capture(string) |\n  capture(number) |\n  lit(\"true\") |\n  lit(\"false\") |\n  lit(\"null\")\n\njson = element\n```\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     synthax:\n       github: homonoidian/synthax\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n- Basic:\n\n  ```crystal\n  require \"synthax\"\n\n  include Sthx::DSL\n\n  # Write rules here...\n\n  top = your_toplevel_rule\n\n  \"my string\".apply(top)  # => Sthx::Ctx | Sthx::Err\n  \"my string\".apply?(top) # => Sthx::Tree?\n  \"my string\".apply!(top) # => Sthx::Tree\n  ```\n\n- A bit more sophisticated:\n\n  ```crystal\n  require \"synthax\"\n\n  module Foo\n    include Sthx::DSL\n\n    GRAMMAR = grammar\n\n    def self.grammar\n      # Write rules here...\n\n      your_toplevel_rule\n    end\n  end\n\n  \"my string\".apply(Foo::GRAMMAR)  # => Sthx::Ctx | Sthx::Err\n  \"my string\".apply?(Foo::GRAMMAR) # => Sthx::Tree?\n  \"my string\".apply!(Foo::GRAMMAR) # => Sthx::Tree\n  ```\n\n- Rules and `Tree` are persistent and immutable. Linked list + path copying\n  is used where appropriate, for storing children and mappings `Pf::Map` is\n  used (hence the dependency on `permafrost`).\n\n- For all else [see the docs](https://homonoidian.github.io/synthax/)\n\n## `capture` and `keep`\n\nA `Tree` has *children* (`0` to some `N` of them) and *mappings* (a string to string hash).\n\n`capture(other, id)` lets you reroot the tree produced by *other* to a new `Tree`\nnode with the given *id*.\n\n`keep(other, id)` takes *the string* matched by *other* and creates the mapping\nof *id* to that string in the `capture` above. The tree produced by *other* is\nthrown away.\n\n## Performance\n\nIt's pretty horrible but okay for that phase where you don't have thousands upon\nthousands of lines of code / frequent reparsing thereof. Fast parsing is the least\nof concerns when you're prototyping a language/etc.\n\nIf you need to go through millions of characters routinely this is the worst shard\nto pick I guess. I think recursive descent & a state-machine-ish lexer is better\nfor that purpose.\n\n- No lexer means each character must be processed by rules on the heap. This also\n  means that backtracking to explore another branch is much more expensive, requiring\n  to repeatedly revisit parts of the string within a different context. The grammar\n  driving the parsing instead of the string makes it a much more painful process,\n  but this is the last place where I should write about that so let's move on.\n\n- There is nothing fancy or theoretical done here.\n\nFor 10mb JSON example (including `anify`):\n\n```text\n        JSON.parse  11.38  ( 87.90ms) (± 4.67%)  33.9MB/op        fastest\nSynthax JSON parse 974.49m (  1.03s ) (±15.50%)   418MB/op  11.67× slower\n```\n\nTo test it yourself run `crystal run examples/json.cr -Dbenchmark --release`\n\n- Memory usage is horrible due to `Sthx::Tree` overhead and children array\n  overhead when converting to `JSON::Any`, plus `JSON::Any` itself of course.\n\n- Parsing itself does not consume any memory because it's just recursively\n  exploring a graph (if we don't count the call stack of course!) But you\n  can't opt out of `Sthx::Tree` generation so haha live with it :)\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/homonoidian/synthax/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Alexey Yurchenko](https://github.com/homonoidian) - creator and maintainer\n","program":{"html_id":"synthax/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"synthax","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"synthax/Char","path":"Char.html","kind":"struct","full_name":"Char","name":"Char","abstract":false,"superclass":{"html_id":"synthax/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"synthax/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"synthax/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"synthax/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/ext.cr","line_number":1,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L1"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"synthax/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"}],"doc":"A `Char` represents a [Unicode](http://en.wikipedia.org/wiki/Unicode) [code point](http://en.wikipedia.org/wiki/Code_point).\nIt occupies 32 bits.\n\nIt is created by enclosing an UTF-8 character in single quotes.\n\n```\n'a'\n'z'\n'0'\n'_'\n'あ'\n```\n\nYou can use a backslash to denote some characters:\n\n```\n'\\'' # single quote\n'\\\\' # backslash\n'\\e' # escape\n'\\f' # form feed\n'\\n' # newline\n'\\r' # carriage return\n'\\t' # tab\n'\\v' # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n'\\u0041' # == 'A'\n```\n\nOr you can use curly braces and specify up to four hexadecimal numbers:\n\n```\n'\\u{41}' # == 'A'\n```\n\nSee [`Char` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/char.html) in the language reference.","summary":"<p>A <code><a href=\"Char.html\">Char</a></code> represents a <a href=\"http://en.wikipedia.org/wiki/Unicode\">Unicode</a> <a href=\"http://en.wikipedia.org/wiki/Code_point\">code point</a>.</p>","instance_methods":[{"html_id":"&(other)-instance-method","name":"&","doc":"See `::Sthx::Rule#&`.","summary":"<p>See <code>::Sthx::Rule#&amp;</code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/ext.cr","line_number":2,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L2"},"def":{"name":"&","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"(::Sthx::Rule.from(self)) & other"}},{"html_id":"*(times:Range)-instance-method","name":"*","doc":"See `::Sthx::Rule#*`.","summary":"<p>See <code><a href=\"Sthx/Rule.html#%2A%28times%3ARange%29-instance-method\">::Sthx::Rule#*</a></code>.</p>","abstract":false,"args":[{"name":"times","external_name":"times","restriction":"Range"}],"args_string":"(times : Range)","args_html":"(times : <a href=\"Range.html\">Range</a>)","location":{"filename":"src/synthax/ext.cr","line_number":2,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L2"},"def":{"name":"*","args":[{"name":"times","external_name":"times","restriction":"Range"}],"visibility":"Public","body":"(::Sthx::Rule.from(self)) * times"}},{"html_id":"|(other)-instance-method","name":"|","doc":"See `::Sthx::Rule#|`.","summary":"<p>See <code><a href=\"Sthx/Rule.html#%7C%28other%29-instance-method\">::Sthx::Rule#|</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/ext.cr","line_number":2,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L2"},"def":{"name":"|","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"(::Sthx::Rule.from(self)) | other"}}]},{"html_id":"synthax/Range","path":"Range.html","kind":"struct","full_name":"Range(B, E)","name":"Range","abstract":false,"superclass":{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"synthax/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"synthax/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"synthax/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/ext.cr","line_number":5,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L5"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"synthax/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"doc":"A `Range` represents an interval: a set of values with a beginning and an end.\n\nRanges may be constructed using the usual `new` method or with literals:\n\n```\nx..y  # an inclusive range, in mathematics: [x, y]\nx...y # an exclusive range, in mathematics: [x, y)\n(x..) # an endless range, in mathematics: >= x\n..y   # a beginless inclusive range, in mathematics: <= y\n...y  # a beginless exclusive range, in mathematics: < y\n```\n\nSee [`Range` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/range.html) in the language reference.\n\nAn easy way to remember which one is inclusive and which one is exclusive it\nto think of the extra dot as if it pushes *y* further away, thus leaving it outside of the range.\n\nRanges typically involve integers, but can be created using arbitrary objects\nas long as they define `succ` (or `pred` for `reverse_each`), to get the\nnext element in the range, and `<` and `==`, to know when the range reached the end:\n\n```\n# Represents a string of 'x's.\nstruct Xs\n  include Comparable(Xs)\n\n  getter size\n\n  def initialize(@size : Int32)\n  end\n\n  def succ\n    Xs.new(@size + 1)\n  end\n\n  def <=>(other)\n    @size <=> other.size\n  end\n\n  def inspect(io)\n    @size.times { io << 'x' }\n  end\n\n  def to_s(io)\n    io << @size << ' '\n    inspect(io)\n  end\nend\n```\n\nAn example of using `Xs` to construct a range:\n\n```\nr = Xs.new(3)..Xs.new(6)\nr.to_s                 # => \"xxx..xxxxxx\"\nr.to_a                 # => [Xs.new(3), Xs.new(4), Xs.new(5), Xs.new(6)]\nr.includes?(Xs.new(5)) # => true\n```","summary":"<p>A <code><a href=\"Range.html\">Range</a></code> represents an interval: a set of values with a beginning and an end.</p>","instance_methods":[{"html_id":"&(other)-instance-method","name":"&","doc":"See `::Sthx::Rule#&`.","summary":"<p>See <code>::Sthx::Rule#&amp;</code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/ext.cr","line_number":6,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L6"},"def":{"name":"&","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"(::Sthx::Rule.from(self)) & other"}},{"html_id":"*(times:Range)-instance-method","name":"*","doc":"See `::Sthx::Rule#*`.","summary":"<p>See <code><a href=\"Sthx/Rule.html#%2A%28times%3ARange%29-instance-method\">::Sthx::Rule#*</a></code>.</p>","abstract":false,"args":[{"name":"times","external_name":"times","restriction":"Range"}],"args_string":"(times : Range)","args_html":"(times : <a href=\"Range.html\">Range</a>)","location":{"filename":"src/synthax/ext.cr","line_number":6,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L6"},"def":{"name":"*","args":[{"name":"times","external_name":"times","restriction":"Range"}],"visibility":"Public","body":"(::Sthx::Rule.from(self)) * times"}},{"html_id":"-(other)-instance-method","name":"-","doc":"See `Sthx::Rule#-`.","summary":"<p>See <code><a href=\"Sthx/Rule.html#-%28other%29-instance-method\">Sthx::Rule#-</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/ext.cr","line_number":9,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L9"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"(Sthx::Rule.from(self)) - other"}},{"html_id":"|(other)-instance-method","name":"|","doc":"See `::Sthx::Rule#|`.","summary":"<p>See <code><a href=\"Sthx/Rule.html#%7C%28other%29-instance-method\">::Sthx::Rule#|</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/ext.cr","line_number":6,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L6"},"def":{"name":"|","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"(::Sthx::Rule.from(self)) | other"}}]},{"html_id":"synthax/Sthx","path":"Sthx.html","kind":"module","full_name":"Sthx","name":"Sthx","abstract":false,"locations":[{"filename":"src/synthax.cr","line_number":13,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax.cr#L13"},{"filename":"src/synthax/core/ll.cr","line_number":1,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/core/ll.cr#L1"},{"filename":"src/synthax/ctx.cr","line_number":1,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L1"},{"filename":"src/synthax/dsl.cr","line_number":1,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L1"},{"filename":"src/synthax/error.cr","line_number":1,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/error.cr#L1"},{"filename":"src/synthax/rule.cr","line_number":1,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L1"},{"filename":"src/synthax/tree.cr","line_number":1,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L1"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"Synthax is a simple parser synthesizer DSL for Crystal.","summary":"<p>Synthax is a simple parser synthesizer DSL for Crystal.</p>","types":[{"html_id":"synthax/Sthx/Ctx","path":"Sthx/Ctx.html","kind":"struct","full_name":"Sthx::Ctx","name":"Ctx","abstract":false,"superclass":{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"synthax/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/ctx.cr","line_number":9,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L9"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"synthax/Sthx","kind":"module","full_name":"Sthx","name":"Sthx"},"doc":"Represents the parsing context.\n\n- *reader* is the `Char::Reader` used for reading.\n- *root* is the current root of the parse tree (see `Tree`).\n\nNote that `Ctx` is a *mutable struct* if *reader* is interacted with,\nso try to be careful with that.","summary":"<p>Represents the parsing context.</p>","constructors":[{"html_id":"new(reader:Char::Reader,root:Tree)-class-method","name":"new","abstract":false,"args":[{"name":"reader","external_name":"reader","restriction":"Char::Reader"},{"name":"root","external_name":"root","restriction":"Tree"}],"args_string":"(reader : Char::Reader, root : Tree)","args_html":"(reader : Char::Reader, root : <a href=\"../Sthx/Tree.html\">Tree</a>)","location":{"filename":"src/synthax/ctx.cr","line_number":9,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L9"},"def":{"name":"new","args":[{"name":"reader","external_name":"reader","restriction":"Char::Reader"},{"name":"root","external_name":"root","restriction":"Tree"}],"visibility":"Public","body":"_ = allocate\n_.initialize(reader, root)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"adopt(other:Ctx)-instance-method","name":"adopt","doc":"Returns a copy of this context which has *other* adopted. *Adoption*\nmeans tree adoption (*other*'s root is made the subtree of `self`'s)\nand the picking of the reader which has the most progress out of\n`self`'s and *other*'s.","summary":"<p>Returns a copy of this context which has <em>other</em> adopted.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Ctx"}],"args_string":"(other : Ctx)","args_html":"(other : <a href=\"../Sthx/Ctx.html\">Ctx</a>)","location":{"filename":"src/synthax/ctx.cr","line_number":48,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L48"},"def":{"name":"adopt","args":[{"name":"other","external_name":"other","restriction":"Ctx"}],"visibility":"Public","body":"other = other.terminate\ncopy_with(root: @root.adopt(other.root), reader: (progress < other.progress ? other : self).reader)\n"}},{"html_id":"advance:self-instance-method","name":"advance","doc":"Advances this reader one character forward.","summary":"<p>Advances this reader one character forward.</p>","abstract":false,"location":{"filename":"src/synthax/ctx.cr","line_number":21,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L21"},"def":{"name":"advance","return_type":"self","visibility":"Public","body":"@reader.next_char\nself\n"}},{"html_id":"at_end?:Bool-instance-method","name":"at_end?","doc":"Returns whether this context's reader is at the end of its string.","summary":"<p>Returns whether this context's reader is at the end of its string.</p>","abstract":false,"location":{"filename":"src/synthax/ctx.cr","line_number":28,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L28"},"def":{"name":"at_end?","return_type":"Bool","visibility":"Public","body":"!@reader.has_next?"}},{"html_id":"char:Char-instance-method","name":"char","abstract":false,"location":{"filename":"src/synthax/ctx.cr","line_number":11,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L11"},"def":{"name":"char","return_type":"Char","visibility":"Public","body":"@reader.current_char"}},{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/synthax/ctx.cr","line_number":9,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L9"},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@reader.clone, @root.clone)"}},{"html_id":"copy_with(reader_reader=@reader,root_root=@root)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_reader","default_value":"@reader","external_name":"reader","restriction":""},{"name":"_root","default_value":"@root","external_name":"root","restriction":""}],"args_string":"(reader _reader = @reader, root _root = @root)","args_html":"(reader _reader = @reader, root _root = @root)","location":{"filename":"src/synthax/ctx.cr","line_number":9,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L9"},"def":{"name":"copy_with","args":[{"name":"_reader","default_value":"@reader","external_name":"reader","restriction":""},{"name":"_root","default_value":"@root","external_name":"root","restriction":""}],"visibility":"Public","body":"self.class.new(_reader, _root)"}},{"html_id":"progress:Int32-instance-method","name":"progress","doc":"Returns this context's progress (position) within the source string.","summary":"<p>Returns this context's progress (position) within the source string.</p>","abstract":false,"location":{"filename":"src/synthax/ctx.cr","line_number":16,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L16"},"def":{"name":"progress","return_type":"Int32","visibility":"Public","body":"@reader.pos"}},{"html_id":"reader:Char::Reader-instance-method","name":"reader","abstract":false,"def":{"name":"reader","return_type":"Char::Reader","visibility":"Public","body":"@reader"}},{"html_id":"reroot(id:String):self-instance-method","name":"reroot","doc":"Returns a copy of this context where the root is set to be a\ntree with the given *id*.","summary":"<p>Returns a copy of this context where the root is set to be a tree with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String) : self","args_html":"(id : <a href=\"../String.html\">String</a>) : <span class=\"k\">self</span>","location":{"filename":"src/synthax/ctx.cr","line_number":34,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L34"},"def":{"name":"reroot","args":[{"name":"id","external_name":"id","restriction":"String"}],"return_type":"self","visibility":"Public","body":"copy_with(root: Tree.new(id, @reader.pos))"}},{"html_id":"root:Tree-instance-method","name":"root","abstract":false,"def":{"name":"root","return_type":"Tree","visibility":"Public","body":"@root"}},{"html_id":"terminate:self-instance-method","name":"terminate","doc":"Returns a \"reading-terminated\" copy of this context where the root\ntree spans up to the current position of the reader.","summary":"<p>Returns a &quot;reading-terminated&quot; copy of this context where the root tree spans up to the current position of the reader.</p>","abstract":false,"location":{"filename":"src/synthax/ctx.cr","line_number":40,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L40"},"def":{"name":"terminate","return_type":"self","visibility":"Public","body":"copy_with(root: @root.with_span_to(@reader))"}}]},{"html_id":"synthax/Sthx/DSL","path":"Sthx/DSL.html","kind":"module","full_name":"Sthx::DSL","name":"DSL","abstract":false,"locations":[{"filename":"src/synthax/dsl.cr","line_number":2,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L2"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"synthax/Sthx/DSL","kind":"module","full_name":"Sthx::DSL","name":"DSL"}],"namespace":{"html_id":"synthax/Sthx","kind":"module","full_name":"Sthx","name":"Sthx"},"instance_methods":[{"html_id":"ahead(*args,**options)-instance-method","name":"ahead","doc":"See the same method in `Rule`.","summary":"<p>See the same method in <code><a href=\"../Sthx/Rule.html\">Rule</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/synthax/dsl.cr","line_number":6,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L6"},"def":{"name":"ahead","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"Rule.ahead(*args, **options)"}},{"html_id":"ahead(*args,**options,&)-instance-method","name":"ahead","doc":"See the same method in `Rule`.","summary":"<p>See the same method in <code><a href=\"../Sthx/Rule.html\">Rule</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/synthax/dsl.cr","line_number":6,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L6"},"def":{"name":"ahead","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"Rule.ahead(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"capture(*args,**options)-instance-method","name":"capture","doc":"See the same method in `Rule`.","summary":"<p>See the same method in <code><a href=\"../Sthx/Rule.html\">Rule</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/synthax/dsl.cr","line_number":6,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L6"},"def":{"name":"capture","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"Rule.capture(*args, **options)"}},{"html_id":"capture(*args,**options,&)-instance-method","name":"capture","doc":"See the same method in `Rule`.","summary":"<p>See the same method in <code><a href=\"../Sthx/Rule.html\">Rule</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/synthax/dsl.cr","line_number":6,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L6"},"def":{"name":"capture","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"Rule.capture(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"keep(*args,**options)-instance-method","name":"keep","doc":"See the same method in `Rule`.","summary":"<p>See the same method in <code><a href=\"../Sthx/Rule.html\">Rule</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/synthax/dsl.cr","line_number":6,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L6"},"def":{"name":"keep","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"Rule.keep(*args, **options)"}},{"html_id":"keep(*args,**options,&)-instance-method","name":"keep","doc":"See the same method in `Rule`.","summary":"<p>See the same method in <code><a href=\"../Sthx/Rule.html\">Rule</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/synthax/dsl.cr","line_number":6,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L6"},"def":{"name":"keep","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"Rule.keep(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"lit(string:String):Rule-instance-method","name":"lit","doc":"Returns a literal *string* capture rule (capture whose name is the\nsame as the captrued *string*).\n\n```\nboolean = lit(\"true\") | lit(\"false\")\n\n\"true\".apply!(boolean)\n# => root ⸢0-4⸥\n#      true ⸢0-4⸥\n\n\"false\".apply!(boolean)\n# => root ⸢0-5⸥\n#      false ⸢0-5⸥\n```","summary":"<p>Returns a literal <em>string</em> capture rule (capture whose name is the same as the captrued <em>string</em>).</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"}],"args_string":"(string : String) : Rule","args_html":"(string : <a href=\"../String.html\">String</a>) : <a href=\"../Sthx/Rule.html\">Rule</a>","location":{"filename":"src/synthax/dsl.cr","line_number":22,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L22"},"def":{"name":"lit","args":[{"name":"string","external_name":"string","restriction":"String"}],"return_type":"Rule","visibility":"Public","body":"capture(string, string)"}},{"html_id":"many(exp):Rule-instance-method","name":"many","doc":"Returns a rule that will match *exp* one or more times.\n```\nfoos = \"foo\" & many('s')\n\n\"foo\".apply?(foos)   # => nil\n\"foos\".apply?(foos)  # => Tree\n\"fooss\".apply?(foos) # => Tree\n# ...\n```","summary":"<p>Returns a rule that will match <em>exp</em> one or more times.</p>","abstract":false,"args":[{"name":"exp","external_name":"exp","restriction":""}],"args_string":"(exp) : Rule","args_html":"(exp) : <a href=\"../Sthx/Rule.html\">Rule</a>","location":{"filename":"src/synthax/dsl.cr","line_number":90,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L90"},"def":{"name":"many","args":[{"name":"exp","external_name":"exp","restriction":""}],"return_type":"Rule","visibility":"Public","body":"exp * (1..)"}},{"html_id":"maybe(exp):Rule-instance-method","name":"maybe","doc":"Returns a rule that will match if *exp* (see `Rule.from`) matches zero\nor one times.\n\n```\nxyzzy = \"xy\" & maybe('z') & \"zy\"\n\n\"xyzy\".apply?(xyzzy)  # => Tree\n\"xyzzy\".apply?(xyzzy) # => Tree\n\"xyy\".apply?(xyzzy)   # => nil\n```","summary":"<p>Returns a rule that will match if <em>exp</em> (see <code><a href=\"../Sthx/Rule.html#from%28object%3AChar%29-class-method\">Rule.from</a></code>) matches zero or one times.</p>","abstract":false,"args":[{"name":"exp","external_name":"exp","restriction":""}],"args_string":"(exp) : Rule","args_html":"(exp) : <a href=\"../Sthx/Rule.html\">Rule</a>","location":{"filename":"src/synthax/dsl.cr","line_number":63,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L63"},"def":{"name":"maybe","args":[{"name":"exp","external_name":"exp","restriction":""}],"return_type":"Rule","visibility":"Public","body":"exp * (0...1)"}},{"html_id":"sep(exp,*,bysexp)-instance-method","name":"sep","doc":"Returns a rule that will match a list of one or more *exp*s (see `Rule.from`)\nseparated by *sexp*s (same).\n\n```\nfoo = \"foo\"\nfoos = sep(foo, by: some(' ') & \"and\" & some(' '))\n\n\"\".apply?(foos)                    # => nil\n\"foo\".apply?(foos)                 # => Tree\n\"foo and foo\".apply?(foos)         # => Tree\n\"foo and foo and foo\".apply?(foos) # => Tree\n```","summary":"<p>Returns a rule that will match a list of one or more <em>exp</em>s (see <code><a href=\"../Sthx/Rule.html#from%28object%3AChar%29-class-method\">Rule.from</a></code>) separated by <em>sexp</em>s (same).</p>","abstract":false,"args":[{"name":"exp","external_name":"exp","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"sexp","external_name":"by","restriction":""}],"args_string":"(exp, *, by sexp)","args_html":"(exp, *, by sexp)","location":{"filename":"src/synthax/dsl.cr","line_number":106,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L106"},"def":{"name":"sep","args":[{"name":"exp","external_name":"exp","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"sexp","external_name":"by","restriction":""}],"splat_index":1,"visibility":"Public","body":"exp & (some(sexp & exp))"}},{"html_id":"some(exp):Rule-instance-method","name":"some","doc":"Returns a rule that will match *exp* zero or more times.\n\n```\nfoos = \"foo\" & some('s')\n\n\"foo\".apply?(foos)   # => Tree\n\"foos\".apply?(foos)  # => Tree\n\"fooss\".apply?(foos) # => Tree\n# ...\n```","summary":"<p>Returns a rule that will match <em>exp</em> zero or more times.</p>","abstract":false,"args":[{"name":"exp","external_name":"exp","restriction":""}],"args_string":"(exp) : Rule","args_html":"(exp) : <a href=\"../Sthx/Rule.html\">Rule</a>","location":{"filename":"src/synthax/dsl.cr","line_number":77,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L77"},"def":{"name":"some","args":[{"name":"exp","external_name":"exp","restriction":""}],"return_type":"Rule","visibility":"Public","body":"exp * (..)"}}],"macros":[{"html_id":"capture(var)-macro","name":"capture","doc":"Creates a capture with the same name as the given *var* (which should\nbe the name of a variable holding the captured rule).\n\n```\nboolean = keep(\"true\" | \"false\", \"literal\")\nnull = \"null\"\nvalue = capture(boolean) | capture(null)\n\n\"true\".apply!(value)\n# => root ⸢0-4⸥\n#      boolean ⸢0-4⸥ {\"literal\" => \"true\"}\n\n\"false\".apply!(value)\n# => root ⸢0-5⸥\n#      boolean ⸢0-5⸥ {\"literal\" => \"false\"}\n\n\"null\".apply!(value)\n# => root ⸢0-4⸥\n#      null ⸢0-4⸥\n```","summary":"<p>Creates a capture with the same name as the given <em>var</em> (which should be the name of a variable holding the captured rule).</p>","abstract":false,"args":[{"name":"var","external_name":"var","restriction":""}],"args_string":"(var)","args_html":"(var)","location":{"filename":"src/synthax/dsl.cr","line_number":46,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/dsl.cr#L46"},"def":{"name":"capture","args":[{"name":"var","external_name":"var","restriction":""}],"visibility":"Public","body":"      \n{% if var.is_a?(Var) %}{% else %}\n        {% raise(\"expected an id (got '#{var}'), did you perhaps mean capture(..., ...)?\") %}\n      {% end %}\n\n      capture(\n{{ var }}\n, \"\n{{ var.id }}\n\")\n    \n"}}]},{"html_id":"synthax/Sthx/Err","path":"Sthx/Err.html","kind":"struct","full_name":"Sthx::Err","name":"Err","abstract":false,"superclass":{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"synthax/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/ctx.cr","line_number":59,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L59"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"synthax/Sthx","kind":"module","full_name":"Sthx","name":"Sthx"},"doc":"Wraps a parsing context *ctx* and represents a parse error.","summary":"<p>Wraps a parsing context <em>ctx</em> and represents a parse error.</p>","constructors":[{"html_id":"new(ctx:Ctx)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx)","args_html":"(ctx : <a href=\"../Sthx/Ctx.html\">Ctx</a>)","location":{"filename":"src/synthax/ctx.cr","line_number":59,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L59"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"visibility":"Public","body":"_ = allocate\n_.initialize(ctx)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"char(*args,**options)-instance-method","name":"char","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/synthax/ctx.cr","line_number":61,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L61"},"def":{"name":"char","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@ctx.char(*args, **options)"}},{"html_id":"char(*args,**options,&)-instance-method","name":"char","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/synthax/ctx.cr","line_number":61,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L61"},"def":{"name":"char","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@ctx.char(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/synthax/ctx.cr","line_number":59,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L59"},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@ctx.clone)"}},{"html_id":"copy_with(ctx_ctx=@ctx)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_ctx","default_value":"@ctx","external_name":"ctx","restriction":""}],"args_string":"(ctx _ctx = @ctx)","args_html":"(ctx _ctx = @ctx)","location":{"filename":"src/synthax/ctx.cr","line_number":59,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L59"},"def":{"name":"copy_with","args":[{"name":"_ctx","default_value":"@ctx","external_name":"ctx","restriction":""}],"visibility":"Public","body":"self.class.new(_ctx)"}},{"html_id":"ctx:Ctx-instance-method","name":"ctx","abstract":false,"def":{"name":"ctx","return_type":"Ctx","visibility":"Public","body":"@ctx"}},{"html_id":"humanize(io:IO,*,filename=nil,color=false,readout=false,lookaround=2)-instance-method","name":"humanize","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"","external_name":"","restriction":""},{"name":"filename","default_value":"nil","external_name":"filename","restriction":""},{"name":"color","default_value":"false","external_name":"color","restriction":""},{"name":"readout","default_value":"false","external_name":"readout","restriction":""},{"name":"lookaround","default_value":"2","external_name":"lookaround","restriction":""}],"args_string":"(io : IO, *, filename = nil, color = false, readout = false, lookaround = 2)","args_html":"(io : IO, *, filename = <span class=\"n\">nil</span>, color = <span class=\"n\">false</span>, readout = <span class=\"n\">false</span>, lookaround = <span class=\"n\">2</span>)","location":{"filename":"src/synthax/ctx.cr","line_number":81,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L81"},"def":{"name":"humanize","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"","external_name":"","restriction":""},{"name":"filename","default_value":"nil","external_name":"filename","restriction":""},{"name":"color","default_value":"false","external_name":"color","restriction":""},{"name":"readout","default_value":"false","external_name":"readout","restriction":""},{"name":"lookaround","default_value":"2","external_name":"lookaround","restriction":""}],"splat_index":1,"visibility":"Public","body":"err_lineno, err_column = line_and_column\nio << (\"error:\".colorize.red.bold.toggle(color))\nif char == '\\0'\n  io << \" unexpected end-of-input\"\nelse\n  ((io << \" syntax error near '\") << char) << \"'\"\nend\n(((io << \" at line \") << err_lineno) << \", column \") << err_column\nif filename\n  ((((((io << \" (\") << filename) << \":\") << err_lineno) << \":\") << err_column) << \")\"\nend\nif readout\nelse\n  return\nend\nio.puts\nio.puts\n((@ctx.reader.string.each_line.with_index.skip(Math.max(err_lineno - lookaround, 0))).first(lookaround * 2)).each do |line, line_index|\n  lineno = line_index + 1\n  if line.size > 40\n    offset = Math.max(err_column - 20, 0)\n    trunk = line[offset...(Math.min(err_column + 20, line.size))]\n  else\n    offset = 0\n    trunk = line\n  end\n  linenr = \"  #{lineno}|\"\n  (io << linenr) << ' '\n  if offset.zero?\n  else\n    io << (\"<..\".colorize.dim.toggle(color))\n  end\n  io << (trunk.blank? ? \"⏎\".colorize.dim.toggle(color) : trunk)\n  if trunk.size == line.size\n  else\n    io << (\"..>\".colorize.dim.toggle(color))\n  end\n  io.puts\n  if lineno == err_lineno\n  else\n    next\n  end\n  (io << (\" \" * (linenr.size - 1))) << \"|\"\n  caret_padding = offset.zero? ? err_column : (err_column - offset) + 2\n  (io << (\" \" * caret_padding)) << (\"^ here\".colorize.red.bold.toggle(color))\n  io.puts\nend\n"}},{"html_id":"line_and_column:Tuple(Int32,Int32)-instance-method","name":"line_and_column","doc":"*Computes* and returns a `{line, column}` tuple with the line and\ncolumn where the error occured, *counting both from 1*.","summary":"<p><em>Computes</em> and returns a <code>{line, column}</code> tuple with the line and column where the error occured, <em>counting both from 1</em>.</p>","abstract":false,"location":{"filename":"src/synthax/ctx.cr","line_number":64,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L64"},"def":{"name":"line_and_column","return_type":"::Tuple(Int32, Int32)","visibility":"Public","body":"line, col, fst = 1, 1, true\nreader = @ctx.reader\nwhile reader.has_previous?\n  if reader.current_char == '\\n'\n    line = line + 1\n    fst = false\n  end\n  if fst\n    col = col + 1\n  end\n  reader.previous_char\nend\n{line, col}\n"}},{"html_id":"progress(*args,**options)-instance-method","name":"progress","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/synthax/ctx.cr","line_number":61,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L61"},"def":{"name":"progress","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@ctx.progress(*args, **options)"}},{"html_id":"progress(*args,**options,&)-instance-method","name":"progress","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/synthax/ctx.cr","line_number":61,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ctx.cr#L61"},"def":{"name":"progress","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@ctx.progress(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"synthax/Sthx/Rule","path":"Sthx/Rule.html","kind":"module","full_name":"Sthx::Rule","name":"Rule","abstract":false,"locations":[{"filename":"src/synthax/rule.cr","line_number":2,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L2"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"synthax/Sthx/Rule/Ahead","kind":"class","full_name":"Sthx::Rule::Ahead","name":"Ahead"},{"html_id":"synthax/Sthx/Rule/Capture","kind":"class","full_name":"Sthx::Rule::Capture","name":"Capture"},{"html_id":"synthax/Sthx/Rule/Empty","kind":"struct","full_name":"Sthx::Rule::Empty","name":"Empty"},{"html_id":"synthax/Sthx/Rule/FromRange","kind":"struct","full_name":"Sthx::Rule::FromRange","name":"FromRange"},{"html_id":"synthax/Sthx/Rule/List","kind":"class","full_name":"Sthx::Rule::List","name":"List"},{"html_id":"synthax/Sthx/Rule/Mapping","kind":"class","full_name":"Sthx::Rule::Mapping","name":"Mapping"},{"html_id":"synthax/Sthx/Rule/One","kind":"struct","full_name":"Sthx::Rule::One","name":"One"},{"html_id":"synthax/Sthx/Rule/Refuse","kind":"class","full_name":"Sthx::Rule::Refuse","name":"Refuse"},{"html_id":"synthax/Sthx/Rule/Repeat","kind":"class","full_name":"Sthx::Rule::Repeat","name":"Repeat"}],"namespace":{"html_id":"synthax/Sthx","kind":"module","full_name":"Sthx","name":"Sthx"},"class_methods":[{"html_id":"ahead-class-method","name":"ahead","doc":"Forward declares a rule.\n\n```\nexpr = Rule.ahead\nexpr.put('(' & expr*(0..1) & ')')\n```","summary":"<p>Forward declares a rule.</p>","abstract":false,"location":{"filename":"src/synthax/rule.cr","line_number":193,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L193"},"def":{"name":"ahead","visibility":"Public","body":"Ahead.new"}},{"html_id":"capture(other,id:String)-class-method","name":"capture","doc":"Captures *other* into a subtree with the given *id*.\n\n```\nfoo = Rule.capture('a', \"foo\")\nbar = Rule.capture('b', \"bar\")\n\n\"a\".apply?(foo | bar)\n# =>\n# <root> ⸢0-1⸥\n#   foo ⸢0-1⸥\n\n\"b\".apply?(foo | bar)\n# =>\n# <root> ⸢0-1⸥\n#   bar ⸢0-1⸥\n```","summary":"<p>Captures <em>other</em> into a subtree with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(other, id : String)","args_html":"(other, id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/synthax/rule.cr","line_number":260,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L260"},"def":{"name":"capture","args":[{"name":"other","external_name":"other","restriction":""},{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"Capture.new(from(other), id)"}},{"html_id":"from(object:Char)-class-method","name":"from","doc":"Creates a `Rule` from the given `Char` *object*.\n\n```\nRule.from('a') # => one('a')\n```","summary":"<p>Creates a <code><a href=\"../Sthx/Rule.html\">Rule</a></code> from the given <code><a href=\"../Char.html\">Char</a></code> <em>object</em>.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Char"}],"args_string":"(object : Char)","args_html":"(object : <a href=\"../Char.html\">Char</a>)","location":{"filename":"src/synthax/rule.cr","line_number":202,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L202"},"def":{"name":"from","args":[{"name":"object","external_name":"object","restriction":"Char"}],"visibility":"Public","body":"One.new(object)"}},{"html_id":"from(object:String)-class-method","name":"from","doc":"Creates a `Rule` from the given `String` *object*.\n\nThis works by joining the characters of the string in a chain\n(i.e. `\"foo\"` is the same as `'f' & 'o' & 'o'`).\n\n```\nRule.from(\"foo\") # => one('f') & one('o') & one('o')\n```","summary":"<p>Creates a <code><a href=\"../Sthx/Rule.html\">Rule</a></code> from the given <code><a href=\"../String.html\">String</a></code> <em>object</em>.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"String"}],"args_string":"(object : String)","args_html":"(object : <a href=\"../String.html\">String</a>)","location":{"filename":"src/synthax/rule.cr","line_number":214,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L214"},"def":{"name":"from","args":[{"name":"object","external_name":"object","restriction":"String"}],"visibility":"Public","body":"rule = Empty.new\nreader = Char::Reader.new(object)\nwhile reader.has_next?\n  rule = rule & reader.current_char\n  reader.next_char\nend\nrule\n"}},{"html_id":"from(object:Range(Char,Char))-class-method","name":"from","doc":"Creates a `Rule` from the given character range *object*. Any\ncharacter that is in the range will be allowed.\n\n```\nRule.from('a'..'z') # => any('a'..'z')\n```","summary":"<p>Creates a <code><a href=\"../Sthx/Rule.html\">Rule</a></code> from the given character range <em>object</em>.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Range(Char, Char)"}],"args_string":"(object : Range(Char, Char))","args_html":"(object : <a href=\"../Range.html\">Range</a>(<a href=\"../Char.html\">Char</a>, <a href=\"../Char.html\">Char</a>))","location":{"filename":"src/synthax/rule.cr","line_number":230,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L230"},"def":{"name":"from","args":[{"name":"object","external_name":"object","restriction":"Range(Char, Char)"}],"visibility":"Public","body":"FromRange.new(object)"}},{"html_id":"from(object:Range(Int,Int))-class-method","name":"from","doc":"Creates a `Rule` from the given character range *object*. Any\ncharacter that is in the range will be allowed.\n\n```\nRule.from('a'..'z') # => any('a'..'z')\n```","summary":"<p>Creates a <code><a href=\"../Sthx/Rule.html\">Rule</a></code> from the given character range <em>object</em>.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Range(Int, Int)"}],"args_string":"(object : Range(Int, Int))","args_html":"(object : <a href=\"../Range.html\">Range</a>(Int, Int))","location":{"filename":"src/synthax/rule.cr","line_number":235,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L235"},"def":{"name":"from","args":[{"name":"object","external_name":"object","restriction":"Range(Int, Int)"}],"visibility":"Public","body":"from(Range.new(object.begin.chr, object.end.chr, object.exclusive?))"}},{"html_id":"keep(other,id:String)-class-method","name":"keep","doc":"Defines a tree mapping called *id* whose value is the underlying\nstring content of *other*.","summary":"<p>Defines a tree mapping called <em>id</em> whose value is the underlying string content of <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(other, id : String)","args_html":"(other, id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/synthax/rule.cr","line_number":266,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L266"},"def":{"name":"keep","args":[{"name":"other","external_name":"other","restriction":""},{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"Mapping.new(from(other), id)"}}],"instance_methods":[{"html_id":"&(other)-instance-method","name":"&","doc":"Asserts that *other* must follow `self` for a match to occur.\n\n```\nxy = Rule.from('x') & Rule.from('y')\n\"\".apply?(xy)   # => nil\n\"x\".apply?(xy)  # => nil\n\"xa\".apply?(xy) # => nil\n\"xy\".apply?(xy) # => Tree\n\"yx\".apply?(xy) # => nil\n```","summary":"<p>Asserts that <em>other</em> must follow <code>self</code> for a match to occur.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/rule.cr","line_number":302,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L302"},"def":{"name":"&","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"Chain.new(Core::LinkedList[self.as(Rule), Rule.from(other)])"}},{"html_id":"*(times:Range)-instance-method","name":"*","doc":"Repeats `self` a number of *times*.\n\n- `..` means repeat zero or more times\n- `n..` means repeat *n* or more times\n- `..m`/`...m` means repeat zero to and including/excluding *m* times\n- `n..m`/`n...m` means repeat *n* to and including/excluding *m* times\n\nDue to how (weirdly?) Crystal ranges are parsed you'll almost always\nwant the range in parentheses.\n\n```\nxs = Rule.from('x') * (1..)\n\"\".apply?(xs)    # => nil\n\"x\".apply?(xs)   # => Tree\n\"xx\".apply?(xs)  # => Tree\n\"xxx\".apply?(xs) # => Tree\n# ...\n```","summary":"<p>Repeats <code>self</code> a number of <em>times</em>.</p>","abstract":false,"args":[{"name":"times","external_name":"times","restriction":"Range"}],"args_string":"(times : Range)","args_html":"(times : <a href=\"../Range.html\">Range</a>)","location":{"filename":"src/synthax/rule.cr","line_number":288,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L288"},"def":{"name":"*","args":[{"name":"times","external_name":"times","restriction":"Range"}],"visibility":"Public","body":"Repeat.new(self, times)"}},{"html_id":"-(other)-instance-method","name":"-","doc":"Asserts that *other* must *not* match for `self` to match.\n\n```\nfoo = Rule.from('a'..'z') - 'x'\n\"a\".apply?(xy) # => Tree\n\"z\".apply?(xy) # => Tree\n\"x\".apply?(xy) # => nil\n```","summary":"<p>Asserts that <em>other</em> must <em>not</em> match for <code>self</code> to match.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/rule.cr","line_number":328,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L328"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"Refuse.new(self, Rule.from(other))"}},{"html_id":"|(other)-instance-method","name":"|","doc":"Asserts that either `self` or *other* must match for a match to occur,\nin that order.\n\n```\nxy = Rule.from('x') | Rule.from('y')\n\"\".apply?(xy)  # => nil\n\"x\".apply?(xy) # => Tree\n\"y\".apply?(xy) # => Tree\n\"z\".apply?(xy) # => nil\n```","summary":"<p>Asserts that either <code>self</code> or <em>other</em> must match for a match to occur, in that order.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/rule.cr","line_number":316,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L316"},"def":{"name":"|","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"Branch.new(Core::LinkedList[self.as(Rule), Rule.from(other)])"}},{"html_id":"eval(ctx:Ctx):Ctx|Err-instance-method","name":"eval","doc":"Evaluates this rule within the given parser context *ctx*.","summary":"<p>Evaluates this rule within the given parser context <em>ctx</em>.</p>","abstract":true,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx) : Ctx | Err","args_html":"(ctx : <a href=\"../Sthx/Ctx.html\">Ctx</a>) : <a href=\"../Sthx/Ctx.html\">Ctx</a> | <a href=\"../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":4,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L4"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"return_type":"Ctx | Err","visibility":"Public","body":""}},{"html_id":"eval(ctx:Ctx,&:Ctx->Ctx|Err):Ctx|Err-instance-method","name":"eval","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx, & : Ctx -> Ctx | Err) : Ctx | Err","args_html":"(ctx : <a href=\"../Sthx/Ctx.html\">Ctx</a>, & : <a href=\"../Sthx/Ctx.html\">Ctx</a> -> <a href=\"../Sthx/Ctx.html\">Ctx</a> | <a href=\"../Sthx/Err.html\">Err</a>) : <a href=\"../Sthx/Ctx.html\">Ctx</a> | <a href=\"../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":6,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L6"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Ctx -> Ctx | Err)"},"return_type":"Ctx | Err","visibility":"Public","body":"result = eval(ctx)\nresult.is_a?(Ctx) ? yield result : return result\n"}}],"types":[{"html_id":"synthax/Sthx/Rule/Ahead","path":"Sthx/Rule/Ahead.html","kind":"class","full_name":"Sthx::Rule::Ahead","name":"Ahead","abstract":false,"superclass":{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/rule.cr","line_number":45,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L45"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"}],"namespace":{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},"doc":"Forward declaration of a rule.","summary":"<p>Forward declaration of a rule.</p>","instance_methods":[{"html_id":"eval(ctx:Ctx):Ctx|Err-instance-method","name":"eval","doc":"Evaluates this rule within the given parser context *ctx*.","summary":"<p>Evaluates this rule within the given parser context <em>ctx</em>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx) : Ctx | Err","args_html":"(ctx : <a href=\"../../Sthx/Ctx.html\">Ctx</a>) : <a href=\"../../Sthx/Ctx.html\">Ctx</a> | <a href=\"../../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":60,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L60"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"return_type":"Ctx | Err","visibility":"Public","body":"if rule = @rule\nelse\n  raise(NotImplementedError.new(\"no matching put() for Rule.ahead\"))\nend\nrule.eval(ctx)\n"}},{"html_id":"put(rule:Rule)-instance-method","name":"put","doc":"Assigns *rule*, should be called when its definition becomes available.\n\n```\nexpr = Rule.ahead\nexpr.put('(' & expr*(0..1) & ')')\n\n\"(((())))\".apply?(expr) # => Tree\n\"((())\".apply?(expr)    # => nil\n```","summary":"<p>Assigns <em>rule</em>, should be called when its definition becomes available.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":"Rule"}],"args_string":"(rule : Rule)","args_html":"(rule : <a href=\"../../Sthx/Rule.html\">Rule</a>)","location":{"filename":"src/synthax/rule.cr","line_number":57,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L57"},"def":{"name":"put","args":[{"name":"rule","external_name":"rule","restriction":"Rule"}],"visibility":"Public","body":"@rule = rule"}}]},{"html_id":"synthax/Sthx/Rule/Branch","path":"Sthx/Rule/Branch.html","kind":"class","full_name":"Sthx::Rule::Branch","name":"Branch","abstract":false,"superclass":{"html_id":"synthax/Sthx/Rule/List","kind":"class","full_name":"Sthx::Rule::List","name":"List"},"ancestors":[{"html_id":"synthax/Sthx/Rule/List","kind":"class","full_name":"Sthx::Rule::List","name":"List"},{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/rule.cr","line_number":130,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L130"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},"doc":"A choice of multiple rules. If one fails the next one is tried.","summary":"<p>A choice of multiple rules.</p>","instance_methods":[{"html_id":"|(other)-instance-method","name":"|","doc":"Asserts that either `self` or *other* must match for a match to occur,\nin that order.\n\n```\nxy = Rule.from('x') | Rule.from('y')\n\"\".apply?(xy)  # => nil\n\"x\".apply?(xy) # => Tree\n\"y\".apply?(xy) # => Tree\n\"z\".apply?(xy) # => nil\n```","summary":"<p>Asserts that either <code>self</code> or <em>other</em> must match for a match to occur, in that order.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/rule.cr","line_number":131,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L131"},"def":{"name":"|","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"append(Rule.from(other))"}},{"html_id":"eval(ctx:Ctx):Ctx|Err-instance-method","name":"eval","doc":"Evaluates this rule within the given parser context *ctx*.","summary":"<p>Evaluates this rule within the given parser context <em>ctx</em>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx) : Ctx | Err","args_html":"(ctx : <a href=\"../../Sthx/Ctx.html\">Ctx</a>) : <a href=\"../../Sthx/Ctx.html\">Ctx</a> | <a href=\"../../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":135,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L135"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"return_type":"Ctx | Err","visibility":"Public","body":"err = nil\n@rules.each do |rule|\n  result = rule.eval(ctx)\n  if result.is_a?(Err)\n  else\n    return result\n  end\n  if err.nil? || err.progress < result.progress\n    err = result\n  end\nend\nerr.not_nil!\n"}}]},{"html_id":"synthax/Sthx/Rule/Capture","path":"Sthx/Rule/Capture.html","kind":"class","full_name":"Sthx::Rule::Capture","name":"Capture","abstract":false,"superclass":{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/rule.cr","line_number":68,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L68"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"}],"namespace":{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},"doc":"Captures the result of a rule into a subtree with the specified id.","summary":"<p>Captures the result of a rule into a subtree with the specified id.</p>","constructors":[{"html_id":"new(rule:Rule,id:String)-class-method","name":"new","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":"Rule"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(rule : Rule, id : String)","args_html":"(rule : <a href=\"../../Sthx/Rule.html\">Rule</a>, id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/synthax/rule.cr","line_number":71,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L71"},"def":{"name":"new","args":[{"name":"rule","external_name":"rule","restriction":"Rule"},{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(rule, id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"eval(ctx:Ctx):Ctx|Err-instance-method","name":"eval","doc":"Evaluates this rule within the given parser context *ctx*.","summary":"<p>Evaluates this rule within the given parser context <em>ctx</em>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx) : Ctx | Err","args_html":"(ctx : <a href=\"../../Sthx/Ctx.html\">Ctx</a>) : <a href=\"../../Sthx/Ctx.html\">Ctx</a> | <a href=\"../../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":74,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L74"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"return_type":"Ctx | Err","visibility":"Public","body":"@rule.eval(ctx.reroot(@id)) do |sub|\n  ctx.adopt(sub)\nend"}}]},{"html_id":"synthax/Sthx/Rule/Chain","path":"Sthx/Rule/Chain.html","kind":"class","full_name":"Sthx::Rule::Chain","name":"Chain","abstract":false,"superclass":{"html_id":"synthax/Sthx/Rule/List","kind":"class","full_name":"Sthx::Rule::List","name":"List"},"ancestors":[{"html_id":"synthax/Sthx/Rule/List","kind":"class","full_name":"Sthx::Rule::List","name":"List"},{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/rule.cr","line_number":116,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L116"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},"doc":"A sequence of rules. If a preceding rule fails the consecutive ones\nwill not match.","summary":"<p>A sequence of rules.</p>","instance_methods":[{"html_id":"&(other)-instance-method","name":"&","doc":"Asserts that *other* must follow `self` for a match to occur.\n\n```\nxy = Rule.from('x') & Rule.from('y')\n\"\".apply?(xy)   # => nil\n\"x\".apply?(xy)  # => nil\n\"xa\".apply?(xy) # => nil\n\"xy\".apply?(xy) # => Tree\n\"yx\".apply?(xy) # => nil\n```","summary":"<p>Asserts that <em>other</em> must follow <code>self</code> for a match to occur.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/rule.cr","line_number":117,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L117"},"def":{"name":"&","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"append(Rule.from(other))"}},{"html_id":"eval(ctx:Ctx):Ctx|Err-instance-method","name":"eval","doc":"Evaluates this rule within the given parser context *ctx*.","summary":"<p>Evaluates this rule within the given parser context <em>ctx</em>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx) : Ctx | Err","args_html":"(ctx : <a href=\"../../Sthx/Ctx.html\">Ctx</a>) : <a href=\"../../Sthx/Ctx.html\">Ctx</a> | <a href=\"../../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":121,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L121"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"return_type":"Ctx | Err","visibility":"Public","body":"@rules.reduce(ctx) do |ctx, rule|\n  result = rule.eval(ctx)\n  result.is_a?(Ctx) ? result : return result\nend"}}]},{"html_id":"synthax/Sthx/Rule/Empty","path":"Sthx/Rule/Empty.html","kind":"struct","full_name":"Sthx::Rule::Empty","name":"Empty","abstract":false,"superclass":{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"synthax/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/rule.cr","line_number":12,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L12"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"}],"namespace":{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},"doc":"Represents the empty rule.","summary":"<p>Represents the empty rule.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/synthax/rule.cr","line_number":12,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L12"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"eval(ctx:Ctx):Ctx|Err-instance-method","name":"eval","doc":"Evaluates this rule within the given parser context *ctx*.","summary":"<p>Evaluates this rule within the given parser context <em>ctx</em>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx) : Ctx | Err","args_html":"(ctx : <a href=\"../../Sthx/Ctx.html\">Ctx</a>) : <a href=\"../../Sthx/Ctx.html\">Ctx</a> | <a href=\"../../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":15,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L15"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"return_type":"Ctx | Err","visibility":"Public","body":"ctx"}},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/synthax/rule.cr","line_number":12,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L12"},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"synthax/Sthx/Rule/FromRange","path":"Sthx/Rule/FromRange.html","kind":"struct","full_name":"Sthx::Rule::FromRange","name":"FromRange","abstract":false,"superclass":{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"synthax/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/rule.cr","line_number":33,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L33"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"}],"namespace":{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},"doc":"Parses a single character from the specified character range.","summary":"<p>Parses a single character from the specified character range.</p>","constructors":[{"html_id":"new(range:Range(Char,Char))-class-method","name":"new","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range(Char, Char)"}],"args_string":"(range : Range(Char, Char))","args_html":"(range : <a href=\"../../Range.html\">Range</a>(<a href=\"../../Char.html\">Char</a>, <a href=\"../../Char.html\">Char</a>))","location":{"filename":"src/synthax/rule.cr","line_number":36,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L36"},"def":{"name":"new","args":[{"name":"range","external_name":"range","restriction":"Range(Char, Char)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(range)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"eval(ctx:Ctx):Ctx|Err-instance-method","name":"eval","doc":"Evaluates this rule within the given parser context *ctx*.","summary":"<p>Evaluates this rule within the given parser context <em>ctx</em>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx) : Ctx | Err","args_html":"(ctx : <a href=\"../../Sthx/Ctx.html\">Ctx</a>) : <a href=\"../../Sthx/Ctx.html\">Ctx</a> | <a href=\"../../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":39,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L39"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"return_type":"Ctx | Err","visibility":"Public","body":"ctx.char.in?(@range) ? ctx.advance : Err.new(ctx)"}}]},{"html_id":"synthax/Sthx/Rule/List","path":"Sthx/Rule/List.html","kind":"class","full_name":"Sthx::Rule::List","name":"List","abstract":true,"superclass":{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/rule.cr","line_number":102,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L102"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"}],"subclasses":[{"html_id":"synthax/Sthx/Rule/Branch","kind":"class","full_name":"Sthx::Rule::Branch","name":"Branch"},{"html_id":"synthax/Sthx/Rule/Chain","kind":"class","full_name":"Sthx::Rule::Chain","name":"Chain"}],"namespace":{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},"doc":"A list of rules.","summary":"<p>A list of rules.</p>","constructors":[{"html_id":"new(rules:Core::LinkedList(Rule))-class-method","name":"new","abstract":false,"args":[{"name":"rules","external_name":"rules","restriction":"Core::LinkedList(Rule)"}],"args_string":"(rules : Core::LinkedList(Rule))","args_html":"(rules : Core::LinkedList(<a href=\"../../Sthx/Rule.html\">Rule</a>))","location":{"filename":"src/synthax/rule.cr","line_number":105,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L105"},"def":{"name":"new","args":[{"name":"rules","external_name":"rules","restriction":"Core::LinkedList(Rule)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(rules)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"append(rule:Rule):self-instance-method","name":"append","doc":"Adds another *rule* to the end of this list.","summary":"<p>Adds another <em>rule</em> to the end of this list.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":"Rule"}],"args_string":"(rule : Rule) : self","args_html":"(rule : <a href=\"../../Sthx/Rule.html\">Rule</a>) : <span class=\"k\">self</span>","location":{"filename":"src/synthax/rule.cr","line_number":109,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L109"},"def":{"name":"append","args":[{"name":"rule","external_name":"rule","restriction":"Rule"}],"return_type":"self","visibility":"Public","body":"self.class.new(@rules.push(rule))"}}]},{"html_id":"synthax/Sthx/Rule/Mapping","path":"Sthx/Rule/Mapping.html","kind":"class","full_name":"Sthx::Rule::Mapping","name":"Mapping","abstract":false,"superclass":{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/rule.cr","line_number":81,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L81"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"}],"namespace":{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},"doc":"Captures the string matched by of a rule and saves it in the tree\nunder a mapping with the specified id.","summary":"<p>Captures the string matched by of a rule and saves it in the tree under a mapping with the specified id.</p>","constructors":[{"html_id":"new(rule:Rule,id:String)-class-method","name":"new","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":"Rule"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(rule : Rule, id : String)","args_html":"(rule : <a href=\"../../Sthx/Rule.html\">Rule</a>, id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/synthax/rule.cr","line_number":84,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L84"},"def":{"name":"new","args":[{"name":"rule","external_name":"rule","restriction":"Rule"},{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(rule, id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"eval(ctx:Ctx):Ctx|Err-instance-method","name":"eval","doc":"Evaluates this rule within the given parser context *ctx*.","summary":"<p>Evaluates this rule within the given parser context <em>ctx</em>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx) : Ctx | Err","args_html":"(ctx : <a href=\"../../Sthx/Ctx.html\">Ctx</a>) : <a href=\"../../Sthx/Ctx.html\">Ctx</a> | <a href=\"../../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":87,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L87"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"return_type":"Ctx | Err","visibility":"Public","body":"@rule.eval(ctx.reroot(@id)) do |sub|\n  span = sub.reader.pos - ctx.reader.pos\n  substring = String.build(span) do |io|\n    span.times do\n      io << ctx.reader.current_char\n      ctx.reader.next_char\n    end\n  end\n  ctx.copy_with(root: ctx.root.with(@id, substring))\nend"}}]},{"html_id":"synthax/Sthx/Rule/One","path":"Sthx/Rule/One.html","kind":"struct","full_name":"Sthx::Rule::One","name":"One","abstract":false,"superclass":{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},{"html_id":"synthax/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"synthax/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/rule.cr","line_number":21,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L21"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"}],"namespace":{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},"doc":"Parses a single character.","summary":"<p>Parses a single character.</p>","constructors":[{"html_id":"new(char:Char)-class-method","name":"new","abstract":false,"args":[{"name":"char","external_name":"char","restriction":"Char"}],"args_string":"(char : Char)","args_html":"(char : <a href=\"../../Char.html\">Char</a>)","location":{"filename":"src/synthax/rule.cr","line_number":24,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L24"},"def":{"name":"new","args":[{"name":"char","external_name":"char","restriction":"Char"}],"visibility":"Public","body":"_ = allocate\n_.initialize(char)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"eval(ctx:Ctx):Ctx|Err-instance-method","name":"eval","doc":"Evaluates this rule within the given parser context *ctx*.","summary":"<p>Evaluates this rule within the given parser context <em>ctx</em>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx) : Ctx | Err","args_html":"(ctx : <a href=\"../../Sthx/Ctx.html\">Ctx</a>) : <a href=\"../../Sthx/Ctx.html\">Ctx</a> | <a href=\"../../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":27,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L27"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"return_type":"Ctx | Err","visibility":"Public","body":"ctx.char == @char ? ctx.advance : Err.new(ctx)"}}]},{"html_id":"synthax/Sthx/Rule/Refuse","path":"Sthx/Rule/Refuse.html","kind":"class","full_name":"Sthx::Rule::Refuse","name":"Refuse","abstract":false,"superclass":{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/rule.cr","line_number":151,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L151"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"}],"namespace":{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},"doc":"Refuse to match certain characters/rules.","summary":"<p>Refuse to match certain characters/rules.</p>","constructors":[{"html_id":"new(body:Rule,cond:Rule)-class-method","name":"new","abstract":false,"args":[{"name":"body","external_name":"body","restriction":"Rule"},{"name":"cond","external_name":"cond","restriction":"Rule"}],"args_string":"(body : Rule, cond : Rule)","args_html":"(body : <a href=\"../../Sthx/Rule.html\">Rule</a>, cond : <a href=\"../../Sthx/Rule.html\">Rule</a>)","location":{"filename":"src/synthax/rule.cr","line_number":154,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L154"},"def":{"name":"new","args":[{"name":"body","external_name":"body","restriction":"Rule"},{"name":"cond","external_name":"cond","restriction":"Rule"}],"visibility":"Public","body":"_ = allocate\n_.initialize(body, cond)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"eval(ctx:Ctx):Ctx|Err-instance-method","name":"eval","doc":"Evaluates this rule within the given parser context *ctx*.","summary":"<p>Evaluates this rule within the given parser context <em>ctx</em>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx) : Ctx | Err","args_html":"(ctx : <a href=\"../../Sthx/Ctx.html\">Ctx</a>) : <a href=\"../../Sthx/Ctx.html\">Ctx</a> | <a href=\"../../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":157,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L157"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"return_type":"Ctx | Err","visibility":"Public","body":"if mctx = (@cond.eval(ctx)).as?(Ctx)\n  return Err.new(mctx)\nend\n@body.eval(ctx)\n"}}]},{"html_id":"synthax/Sthx/Rule/Repeat","path":"Sthx/Rule/Repeat.html","kind":"class","full_name":"Sthx::Rule::Repeat","name":"Repeat","abstract":false,"superclass":{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/rule.cr","line_number":167,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L167"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"}],"namespace":{"html_id":"synthax/Sthx/Rule","kind":"module","full_name":"Sthx::Rule","name":"Rule"},"doc":"Repeat a rule some number of times.","summary":"<p>Repeat a rule some number of times.</p>","constructors":[{"html_id":"new(body:Rule,times)-class-method","name":"new","abstract":false,"args":[{"name":"body","external_name":"body","restriction":"Rule"},{"name":"times","external_name":"times","restriction":""}],"args_string":"(body : Rule, times)","args_html":"(body : <a href=\"../../Sthx/Rule.html\">Rule</a>, times)","location":{"filename":"src/synthax/rule.cr","line_number":173,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L173"},"def":{"name":"new","args":[{"name":"body","external_name":"body","restriction":"Rule"},{"name":"times","external_name":"times","restriction":""}],"visibility":"Public","body":"b = times.begin || 0\ne = times.end.as(Int32 | ::Nil)\nnew(body, range: times.exclusive? ? 0...e : 0..e, min: b)\n"}}],"instance_methods":[{"html_id":"eval(ctx:Ctx):Ctx|Err-instance-method","name":"eval","doc":"Evaluates this rule within the given parser context *ctx*.","summary":"<p>Evaluates this rule within the given parser context <em>ctx</em>.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"args_string":"(ctx : Ctx) : Ctx | Err","args_html":"(ctx : <a href=\"../../Sthx/Ctx.html\">Ctx</a>) : <a href=\"../../Sthx/Ctx.html\">Ctx</a> | <a href=\"../../Sthx/Err.html\">Err</a>","location":{"filename":"src/synthax/rule.cr","line_number":179,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/rule.cr#L179"},"def":{"name":"eval","args":[{"name":"ctx","external_name":"ctx","restriction":"Ctx"}],"return_type":"Ctx | Err","visibility":"Public","body":"@range.reduce(ctx) do |ctx, niter|\n  result = @body.eval(ctx)\n  result.is_a?(Ctx) ? result : return (  niter >= @min ? ctx : result)\nend"}}]}]},{"html_id":"synthax/Sthx/SyntaxError","path":"Sthx/SyntaxError.html","kind":"class","full_name":"Sthx::SyntaxError","name":"SyntaxError","abstract":false,"superclass":{"html_id":"synthax/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"synthax/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/error.cr","line_number":3,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/error.cr#L3"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"synthax/Sthx","kind":"module","full_name":"Sthx","name":"Sthx"},"doc":"An exception raised when parsing fails.","summary":"<p>An exception raised when parsing fails.</p>","constructors":[{"html_id":"new(err:Err)-class-method","name":"new","abstract":false,"args":[{"name":"err","external_name":"err","restriction":"Err"}],"args_string":"(err : Err)","args_html":"(err : <a href=\"../Sthx/Err.html\">Err</a>)","location":{"filename":"src/synthax/error.cr","line_number":7,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/error.cr#L7"},"def":{"name":"new","args":[{"name":"err","external_name":"err","restriction":"Err"}],"visibility":"Public","body":"_ = allocate\n_.initialize(err)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"err:Sthx::Err-instance-method","name":"err","doc":"Returns the `Sthx::Err` object.","summary":"<p>Returns the <code><a href=\"../Sthx/Err.html\">Sthx::Err</a></code> object.</p>","abstract":false,"location":{"filename":"src/synthax/error.cr","line_number":5,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/error.cr#L5"},"def":{"name":"err","visibility":"Public","body":"@err"}}]},{"html_id":"synthax/Sthx/Tree","path":"Sthx/Tree.html","kind":"class","full_name":"Sthx::Tree","name":"Tree","abstract":false,"superclass":{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/tree.cr","line_number":2,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L2"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"synthax/Sthx","kind":"module","full_name":"Sthx","name":"Sthx"},"constructors":[{"html_id":"new(id:String,begin__arg0:Int32,span:Int32=0,children:Pf::Map(Int32,Sthx::Tree)=Pf::Map(Int32,Tree).new,mappings:Pf::Map(String,String)=Pf::Map(String,String).new)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"__arg0","external_name":"begin","restriction":"::Int32"},{"name":"span","default_value":"0","external_name":"span","restriction":"::Int32"},{"name":"children","default_value":"Pf::Map(Int32, Tree).new","external_name":"children","restriction":"::Pf::Map(::Int32, ::Sthx::Tree)"},{"name":"mappings","default_value":"Pf::Map(String, String).new","external_name":"mappings","restriction":"::Pf::Map(::String, ::String)"}],"args_string":"(id : String, begin __arg0 : Int32, span : Int32 = 0, children : Pf::Map(Int32, Sthx::Tree) = Pf::Map(Int32, Tree).new, mappings : Pf::Map(String, String) = Pf::Map(String, String).new)","args_html":"(id : <a href=\"../String.html\">String</a>, begin __arg0 : Int32, span : Int32 = <span class=\"n\">0</span>, children : Pf::Map(Int32, <a href=\"../Sthx/Tree.html\">Sthx::Tree</a>) = <span class=\"t\">Pf</span><span class=\"t\">::</span><span class=\"t\">Map</span>(<span class=\"t\">Int32</span>, <span class=\"t\">Tree</span>).new, mappings : Pf::Map(<a href=\"../String.html\">String</a>, <a href=\"../String.html\">String</a>) = <span class=\"t\">Pf</span><span class=\"t\">::</span><span class=\"t\">Map</span>(<span class=\"t\">String</span>, <span class=\"t\">String</span>).new)","location":{"filename":"src/synthax/tree.cr","line_number":10,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L10"},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"__arg0","external_name":"begin","restriction":"::Int32"},{"name":"span","default_value":"0","external_name":"span","restriction":"::Int32"},{"name":"children","default_value":"Pf::Map(Int32, Tree).new","external_name":"children","restriction":"::Pf::Map(::Int32, ::Sthx::Tree)"},{"name":"mappings","default_value":"Pf::Map(String, String).new","external_name":"mappings","restriction":"::Pf::Map(::String, ::String)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, __arg0, span, children, mappings)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](mapping:String):String-instance-method","name":"[]","doc":"Returns the value of the given *mapping* on this tree. See `Rule.keep`.\nFor examples see `map` and `map?`.","summary":"<p>Returns the value of the given <em>mapping</em> on this tree.</p>","abstract":false,"args":[{"name":"mapping","external_name":"mapping","restriction":"String"}],"args_string":"(mapping : String) : String","args_html":"(mapping : <a href=\"../String.html\">String</a>) : <a href=\"../String.html\">String</a>","location":{"filename":"src/synthax/tree.cr","line_number":29,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L29"},"def":{"name":"[]","args":[{"name":"mapping","external_name":"mapping","restriction":"String"}],"return_type":"String","visibility":"Public","body":"@mappings[mapping]"}},{"html_id":"[](index:Int):Tree-instance-method","name":"[]","doc":"Returns *index*-th child of this tree.","summary":"<p>Returns <em>index</em>-th child of this tree.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Tree","args_html":"(index : Int) : <a href=\"../Sthx/Tree.html\">Tree</a>","location":{"filename":"src/synthax/tree.cr","line_number":34,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L34"},"def":{"name":"[]","args":[{"name":"index","external_name":"index","restriction":"Int"}],"return_type":"Tree","visibility":"Public","body":"@children[index]"}},{"html_id":"begin:Int32-instance-method","name":"begin","doc":"Returns the index of the first character of this tree in the\nsource string.","summary":"<p>Returns the index of the first character of this tree in the source string.</p>","abstract":false,"location":{"filename":"src/synthax/tree.cr","line_number":8,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L8"},"def":{"name":"begin","return_type":"Int32","visibility":"Public","body":"@begin"}},{"html_id":"end:Int32-instance-method","name":"end","doc":"Returns the index of the last character of this tree in the\nsource string.","summary":"<p>Returns the index of the last character of this tree in the source string.</p>","abstract":false,"location":{"filename":"src/synthax/tree.cr","line_number":23,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L23"},"def":{"name":"end","return_type":"Int32","visibility":"Public","body":"@begin + @span"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the capture id of this tree (see `Rule.capture`).","summary":"<p>Returns the capture id of this tree (see <code><a href=\"../Sthx/Rule.html#capture%28other%2Cid%3AString%29-class-method\">Rule.capture</a></code>).</p>","abstract":false,"location":{"filename":"src/synthax/tree.cr","line_number":4,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L4"},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"inspect(io,indent=0)-instance-method","name":"inspect","doc":"Appends a string view of this tree to *io*.","summary":"<p>Appends a string view of this tree to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""},{"name":"indent","default_value":"0","external_name":"indent","restriction":""}],"args_string":"(io, indent = 0)","args_html":"(io, indent = <span class=\"n\">0</span>)","location":{"filename":"src/synthax/tree.cr","line_number":189,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L189"},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":""},{"name":"indent","default_value":"0","external_name":"indent","restriction":""}],"visibility":"Public","body":"ws = \" \" * indent\n((((((io << ws) << @id) << \" ⸢\") << @begin) << \"-\") << (@begin + @span)) << \"⸥ \"\nif @mappings.empty?\nelse\n  io << '{'\n  @mappings.each do |k, v|\n    ((io << '\"') << k) << \"\\\" => \"\n    v.inspect(io)\n  end\n  io << '}'\nend\nio << '\\n'\n(0...@children.size).each do |index|\n  @children[index].inspect(io, indent: indent + 2)\nend\n"}},{"html_id":"map(cls:T.class):TforallT-instance-method","name":"map","doc":"Converts `self` into subclass instances of the given class *cls*.\n\n- All nonabstract subclasses of *cls* are studied\n- Their names are converted to snake case: e.g. `BinOp` becomes `bin_op`\n- `Tree`s whose `id` matches the snake case name of some subclass *s* are passed\n  to *s*'s `new` method like so: `s.new(tree : Tree, children : Array(T))`.\n\nPlease note that there is always an implicit *root* node. You must handle\nit as well. See `String#apply?`.\n\n```\nabstract class ASTree\n  class Num < self\n    def initialize(@value : Float64)\n    end\n\n    def self.new(tree : Tree, children : Array(ASTree))\n      new(tree.string.to_f64)\n    end\n\n    def result\n      @value\n    end\n  end\n\n  class BinOp < self\n    def initialize(@operator : String, @a : ASTree, @b : ASTree)\n    end\n\n    def self.new(tree : Tree, children : Array(ASTree))\n      new(tree[\"op\"], children[0], children[1])\n    end\n\n    def result\n      case @operator\n      when \"+\" then @a.result + @b.result\n      when \"-\" then @a.result - @b.result\n      when \"*\" then @a.result * @b.result\n      when \"/\" then @a.result / @b.result\n      else\n        0.0\n      end\n    end\n  end\n\n  class Root < self\n    def initialize(@exps : Array(ASTree))\n    end\n\n    def self.new(tree : Tree, children : Array(ASTree))\n      new(children)\n    end\n\n    def result\n      (exp = @exps.last?) ? exp.result : 0.0\n    end\n  end\nend\n\ninclude DSL\n\nmul = ahead\nadd = ahead\n\nws = (' ' | '\\r' | '\\n' | '\\t')*(..)\nnum = ('0'..'9')*(1..)\nvalue = capture(num) | '(' & ws & add & ws & ')'\n\nmul.put capture(value & ws & keep('*' | '/', \"op\") & ws & mul, \"bin_op\") | value\nadd.put capture(mul & ws & keep('+' | '-', \"op\") & ws & add, \"bin_op\") | mul\n\ne1 = \"2 + 3 * 4\"\ne2 = \"(2 + 3) * 4\"\n\nresults = {e1, e2}.map &.apply?(add).try &.map?(ASTree).try &.result\nresults # => {14.0, 20.0}\n```","summary":"<p>Converts <code>self</code> into subclass instances of the given class <em>cls</em>.</p>","abstract":false,"args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"args_string":"(cls : T.class) : T forall T","args_html":"(cls : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : T forall T","location":{"filename":"src/synthax/tree.cr","line_number":130,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L130"},"def":{"name":"map","args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"return_type":"T","visibility":"Public","body":"haystack = Hash(String, T.class).new\n{% for subclass in T.all_subclasses %}\n        {% if subclass.abstract? %}{% else %}\n          {% name = (subclass.name.split(\"::\"))[-1].underscore %}\n          haystack[{{ name.id.stringify }}] = {{ subclass.name }}\n        {% end %}\n      {% end %}\nvisit(haystack)\n"}},{"html_id":"map(cls:T.class,&fn:Tree,Array(T)->T):TforallT-instance-method","name":"map","doc":"Converts `self` into instance(s)/subcloass instances of the given\nclass *cls*.\n\nCalls *fn* with `self` and the array of `self`'s children already\nconverted into instances of *cls* using *fn* recursively.\n\nMost of the times you'd want to consider the other overload `map?(cls : T.class)`\ninstead, though.\n\nPlease note that there is always an implicit *root* tree. You must handle\nit as well. See `String#apply?`.\n\n```\ninclude DSL\n\nnumber = capture(('0'..'9')*(1..), \"number\")\n\nfactor = ahead\nfactor.put(capture(number & keep('*' | '/', \"kind\") & factor, \"op\") | number)\n\nadd = ahead\nadd.put(capture(factor & keep('+' | '-', \"kind\") & add, \"op\") | factor)\n\nif tree = \"100+200*300\".apply?(add)\n  result = tree.map(Float64) do |tree, children|\n    case tree.id\n    when \"root\"   then next children[0]\n    when \"number\" then next tree.string.to_f64\n    when \"op\"\n      case tree[\"kind\"]\n      when \"+\" then next children[0] + children[2]\n      when \"-\" then next children[0] - children[2]\n      when \"*\" then next children[0] * children[2]\n      when \"/\" then next children[0] / children[2]\n      end\n    end\n    0.0\n  end\n  result # => 60100.0\nend\n```","summary":"<p>Converts <code>self</code> into instance(s)/subcloass instances of the given class <em>cls</em>.</p>","abstract":false,"args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"args_string":"(cls : T.class, &fn : Tree, Array(T) -> T) : T forall T","args_html":"(cls : <span class=\"t\">T</span>.<span class=\"k\">class</span>, &fn : <a href=\"../Sthx/Tree.html\">Tree</a>, Array(T) -> T) : T forall T","location":{"filename":"src/synthax/tree.cr","line_number":184,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L184"},"def":{"name":"map","args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"yields":2,"block_arity":2,"block_arg":{"name":"fn","external_name":"fn","restriction":"(Tree, Array(T) -> T)"},"return_type":"T","visibility":"Public","body":"fn.call(self, (0...@children.size).map do |index|\n  @children[index].map(cls, &fn)\nend)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","doc":"Same as `inspect`.","summary":"<p>Same as <code><a href=\"../Sthx/Tree.html#inspect%28io%2Cindent%3D0%29-instance-method\">#inspect</a></code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/synthax/tree.cr","line_number":207,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/tree.cr#L207"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"inspect(io)"}}]}]},{"html_id":"synthax/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"synthax/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"synthax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"synthax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/synthax/ext.cr","line_number":14,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L14"}],"repository_name":"synthax","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"synthax/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nSee [`String` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/string.html) in the language reference.\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nA string might end up being composed of bytes which form an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but every\nbyte that doesn't start a valid UTF-8 byte sequence is interpreted as though\nit encodes the Unicode replacement character (U+FFFD) by itself. For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['�', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.\n\nNote that this interpretation only applies to methods inside Crystal; calling\n`#to_slice` or `#to_unsafe`, e.g. when passing a string to a C library, will\nexpose the invalid UTF-8 byte sequences. In particular, `Regex`'s underlying\nengine may reject strings that are not valid UTF-8, or it may invoke undefined\nbehavior on invalid strings. If this is undesired, `#scrub` could be used to\nremove the offending byte sequences first.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","instance_methods":[{"html_id":"&(other)-instance-method","name":"&","doc":"See `::Sthx::Rule#&`.","summary":"<p>See <code>::Sthx::Rule#&amp;</code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/ext.cr","line_number":15,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L15"},"def":{"name":"&","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"(::Sthx::Rule.from(self)) & other"}},{"html_id":"*(times:Range)-instance-method","name":"*","doc":"See `::Sthx::Rule#*`.","summary":"<p>See <code><a href=\"Sthx/Rule.html#%2A%28times%3ARange%29-instance-method\">::Sthx::Rule#*</a></code>.</p>","abstract":false,"args":[{"name":"times","external_name":"times","restriction":"Range"}],"args_string":"(times : Range)","args_html":"(times : <a href=\"Range.html\">Range</a>)","location":{"filename":"src/synthax/ext.cr","line_number":15,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L15"},"def":{"name":"*","args":[{"name":"times","external_name":"times","restriction":"Range"}],"visibility":"Public","body":"(::Sthx::Rule.from(self)) * times"}},{"html_id":"|(other)-instance-method","name":"|","doc":"See `::Sthx::Rule#|`.","summary":"<p>See <code><a href=\"Sthx/Rule.html#%7C%28other%29-instance-method\">::Sthx::Rule#|</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/synthax/ext.cr","line_number":15,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L15"},"def":{"name":"|","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"(::Sthx::Rule.from(self)) | other"}},{"html_id":"apply(rule:Sthx::Rule,*,offset=0,exact=false,origin=\"root\"):Sthx::Ctx|Sthx::Err-instance-method","name":"apply","doc":"Parses this string using *rule*. Returns the resulting parse context\n`Ctx` if parsing succeeded, or `Err` if parsing failed.\n\nAll subtrees (captures) are rooted under a tree with the id given\nby *origin*.\n\n- *rule* is the rule to parse.\n- *offset* specifies the index of the character (as in `#[]`) where\n  to begin matching *rule*.\n- *exact* specifies whether the resulting match should encompass\n  this string entirely.\n- *origin* is the id that should be used for the root of the tree.\n\n```\n\"foo\".apply(\"foo\") # => Ctx(reader : Char::Reader, tree : Tree)\n\"foo\".apply(\"bar\") # => Err(ctx : Ctx)\n```","summary":"<p>Parses this string using <em>rule</em>.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":"Sthx::Rule"},{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"exact","default_value":"false","external_name":"exact","restriction":""},{"name":"origin","default_value":"\"root\"","external_name":"origin","restriction":""}],"args_string":"(rule : Sthx::Rule, *, offset = 0, exact = false, origin = \"root\") : Sthx::Ctx | Sthx::Err","args_html":"(rule : <a href=\"Sthx/Rule.html\">Sthx::Rule</a>, *, offset = <span class=\"n\">0</span>, exact = <span class=\"n\">false</span>, origin = <span class=\"s\">&quot;root&quot;</span>) : <a href=\"Sthx/Ctx.html\">Sthx::Ctx</a> | <a href=\"Sthx/Err.html\">Sthx::Err</a>","location":{"filename":"src/synthax/ext.cr","line_number":34,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L34"},"def":{"name":"apply","args":[{"name":"rule","external_name":"rule","restriction":"Sthx::Rule"},{"name":"","external_name":"","restriction":""},{"name":"offset","default_value":"0","external_name":"offset","restriction":""},{"name":"exact","default_value":"false","external_name":"exact","restriction":""},{"name":"origin","default_value":"\"root\"","external_name":"origin","restriction":""}],"splat_index":1,"return_type":"Sthx::Ctx | Sthx::Err","visibility":"Public","body":"ctx = Sthx::Ctx.new(root: Sthx::Tree.new(origin, offset), reader: Char::Reader.new(self, offset))\nrule.eval(ctx) do |ctx|\n  exact && (!ctx.at_end?) ? Sthx::Err.new(ctx) : ctx.terminate\nend\n"}},{"html_id":"apply(other,**kwargs)-instance-method","name":"apply","doc":"Converts *other* into a rule using `Sthx::Rule.from`, otherwise\nthe same as `apply`.","summary":"<p>Converts <em>other</em> into a rule using <code><a href=\"Sthx/Rule.html#from%28object%3AChar%29-class-method\">Sthx::Rule.from</a></code>, otherwise the same as <code><a href=\"String.html#apply%28rule%3ASthx%3A%3ARule%2C%2A%2Coffset%3D0%2Cexact%3Dfalse%2Corigin%3D%22root%22%29%3ASthx%3A%3ACtx%7CSthx%3A%3AErr-instance-method\">#apply</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other, **kwargs)","args_html":"(other, **kwargs)","location":{"filename":"src/synthax/ext.cr","line_number":43,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L43"},"def":{"name":"apply","args":[{"name":"other","external_name":"other","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"visibility":"Public","body":"apply(Sthx::Rule.from(other), **kwargs)"}},{"html_id":"apply!(*args,**kwargs):Sthx::Tree-instance-method","name":"apply!","doc":"Same as `apply?` but raises `SyntaxError` instead of returning `nil`.\n\n```\n\"foo\".apply!(\"foo\") # => Tree\n\"foo\".apply!(\"bar\") # => raises SyntaxError\n```","summary":"<p>Same as <code><a href=\"String.html#apply%3F%28%2Aargs%2C%2A%2Akwargs%29%3ASthx%3A%3ATree%7CNil-instance-method\">#apply?</a></code> but raises <code>SyntaxError</code> instead of returning <code>nil</code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **kwargs) : Sthx::Tree","args_html":"(*args, **kwargs) : <a href=\"Sthx/Tree.html\">Sthx::Tree</a>","location":{"filename":"src/synthax/ext.cr","line_number":67,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L67"},"def":{"name":"apply!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"splat_index":0,"return_type":"Sthx::Tree","visibility":"Public","body":"case result = apply(*args, **kwargs)\nin Sthx::Err\n  raise(Sthx::SyntaxError.new(result))\nin Sthx::Ctx\n  result.root\nend"}},{"html_id":"apply?(*args,**kwargs):Sthx::Tree|Nil-instance-method","name":"apply?","doc":"Same as `apply` but returns the resulting parse tree, or `nil` if\nparsing failed.\n\n```\n\"foo\".apply?(\"foo\") # => Tree\n\"foo\".apply?(\"bar\") # => nil\n```","summary":"<p>Same as <code><a href=\"String.html#apply%28rule%3ASthx%3A%3ARule%2C%2A%2Coffset%3D0%2Cexact%3Dfalse%2Corigin%3D%22root%22%29%3ASthx%3A%3ACtx%7CSthx%3A%3AErr-instance-method\">#apply</a></code> but returns the resulting parse tree, or <code>nil</code> if parsing failed.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **kwargs) : Sthx::Tree | Nil","args_html":"(*args, **kwargs) : <a href=\"Sthx/Tree.html\">Sthx::Tree</a> | Nil","location":{"filename":"src/synthax/ext.cr","line_number":54,"url":"https://github.com/homonoidian/synthax/blob/94709aa05d5bf79d31d3fe223bfc7f959609fbfe/src/synthax/ext.cr#L54"},"def":{"name":"apply?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"splat_index":0,"return_type":"Sthx::Tree | ::Nil","visibility":"Public","body":"case result = apply(*args, **kwargs)\nin Sthx::Err\n  nil\nin Sthx::Ctx\n  result.root\nend"}}]}]}}